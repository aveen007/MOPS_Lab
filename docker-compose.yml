services:
  mongo:
    image: mongo
    restart: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: aveen
      MONGO_INITDB_ROOT_PASSWORD: mops
    ports:
      - "27017:27017"
    networks:
      - mops
    depends_on:
      - rabbitmq
    volumes:
    - mongo_data:/data/db
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: on-failure
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: aveen
      RABBITMQ_DEFAULT_PASS: mops
    networks:
      - mops

  data_simulator:
    build: 
      context: ./data_simulator
    depends_on:
      - iot_controller
    restart: always
    ports:
      - "8070:8070"
    volumes:
      - data_simulator:/data_simulator
    networks:
      - mops
  iot_controller:
    build: 
      context: ./iot_controller
    ports:
      - "5000:5000"
    restart: on-failure
    
    depends_on:
      - mongo
      - rabbitmq
    volumes:
      - iot_controller:/iot_controller
    networks:
      - mops
  rule_engine:
    build:
      context: ./rule_engine
    restart: always
    ports:
      - "8080:8080"
    develop:
      watch:
        - action: sync+restart
          path: .
          target: .
    depends_on:
      - iot_controller
    volumes:
      - rule_engine:/rule_engine
    networks:
      - mops 
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - mops
  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - grafana_storage:/var/lib/grafana
    networks:
      - mops
networks:
  mops:
    driver: bridge
volumes:
  prometheus_data:
  mongo_data:
  rabbitmq_data:
  rule_engine:
  iot_controller:
  data_simulator:
  grafana_storage:

